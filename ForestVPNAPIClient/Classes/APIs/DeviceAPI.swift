//
// DeviceAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class DeviceAPI {

    /**
     Create new device
     
     - parameter createOrUpdateDeviceRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createDevice(createOrUpdateDeviceRequest: CreateOrUpdateDeviceRequest? = nil, apiResponseQueue: DispatchQueue = ForestVPNAPIAPI.apiResponseQueue, completion: @escaping ((_ data: Device?, _ error: Error?) -> Void)) {
        createDeviceWithRequestBuilder(createOrUpdateDeviceRequest: createOrUpdateDeviceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create new device
     - POST /devices/
     - Create new device 
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter createOrUpdateDeviceRequest: (body)  (optional)
     - returns: RequestBuilder<Device> 
     */
    open class func createDeviceWithRequestBuilder(createOrUpdateDeviceRequest: CreateOrUpdateDeviceRequest? = nil) -> RequestBuilder<Device> {
        let localVariablePath = "/devices/"
        let localVariableURLString = ForestVPNAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createOrUpdateDeviceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Device>.Type = ForestVPNAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Create new device port forwarding
     
     - parameter deviceID: (path)  
     - parameter createOrUpdatePortForwardingRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createDevicePortForwarding(deviceID: UUID, createOrUpdatePortForwardingRequest: CreateOrUpdatePortForwardingRequest? = nil, apiResponseQueue: DispatchQueue = ForestVPNAPIAPI.apiResponseQueue, completion: @escaping ((_ data: PortForwarding?, _ error: Error?) -> Void)) {
        createDevicePortForwardingWithRequestBuilder(deviceID: deviceID, createOrUpdatePortForwardingRequest: createOrUpdatePortForwardingRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create new device port forwarding
     - POST /devices/{deviceID}/port-forwarding/
     - Create new device port forwarding 
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter deviceID: (path)  
     - parameter createOrUpdatePortForwardingRequest: (body)  (optional)
     - returns: RequestBuilder<PortForwarding> 
     */
    open class func createDevicePortForwardingWithRequestBuilder(deviceID: UUID, createOrUpdatePortForwardingRequest: CreateOrUpdatePortForwardingRequest? = nil) -> RequestBuilder<PortForwarding> {
        var localVariablePath = "/devices/{deviceID}/port-forwarding/"
        let deviceIDPreEscape = "\(APIHelper.mapValueToPathItem(deviceID))"
        let deviceIDPostEscape = deviceIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{deviceID}", with: deviceIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = ForestVPNAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createOrUpdatePortForwardingRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PortForwarding>.Type = ForestVPNAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Delete Device
     
     - parameter deviceID: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteDevice(deviceID: UUID, apiResponseQueue: DispatchQueue = ForestVPNAPIAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        deleteDeviceWithRequestBuilder(deviceID: deviceID).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete Device
     - DELETE /devices/{deviceID}/
     - Delete device by id 
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter deviceID: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deleteDeviceWithRequestBuilder(deviceID: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/devices/{deviceID}/"
        let deviceIDPreEscape = "\(APIHelper.mapValueToPathItem(deviceID))"
        let deviceIDPostEscape = deviceIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{deviceID}", with: deviceIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = ForestVPNAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ForestVPNAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Delete Device's Port Forwarding
     
     - parameter deviceID: (path)  
     - parameter portForwardingID: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteDevicePortForwarding(deviceID: UUID, portForwardingID: UUID, apiResponseQueue: DispatchQueue = ForestVPNAPIAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        deleteDevicePortForwardingWithRequestBuilder(deviceID: deviceID, portForwardingID: portForwardingID).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete Device's Port Forwarding
     - DELETE /devices/{deviceID}/port-forwarding/{portForwardingID}/
     - Delete device's port forwarding by id 
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter deviceID: (path)  
     - parameter portForwardingID: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deleteDevicePortForwardingWithRequestBuilder(deviceID: UUID, portForwardingID: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/devices/{deviceID}/port-forwarding/{portForwardingID}/"
        let deviceIDPreEscape = "\(APIHelper.mapValueToPathItem(deviceID))"
        let deviceIDPostEscape = deviceIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{deviceID}", with: deviceIDPostEscape, options: .literal, range: nil)
        let portForwardingIDPreEscape = "\(APIHelper.mapValueToPathItem(portForwardingID))"
        let portForwardingIDPostEscape = portForwardingIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{portForwardingID}", with: portForwardingIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = ForestVPNAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ForestVPNAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Device Info
     
     - parameter deviceID: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDevice(deviceID: UUID, apiResponseQueue: DispatchQueue = ForestVPNAPIAPI.apiResponseQueue, completion: @escaping ((_ data: Device?, _ error: Error?) -> Void)) {
        getDeviceWithRequestBuilder(deviceID: deviceID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Device Info
     - GET /devices/{deviceID}/
     - Retrieve device info 
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter deviceID: (path)  
     - returns: RequestBuilder<Device> 
     */
    open class func getDeviceWithRequestBuilder(deviceID: UUID) -> RequestBuilder<Device> {
        var localVariablePath = "/devices/{deviceID}/"
        let deviceIDPreEscape = "\(APIHelper.mapValueToPathItem(deviceID))"
        let deviceIDPostEscape = deviceIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{deviceID}", with: deviceIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = ForestVPNAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Device>.Type = ForestVPNAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Device's stats detail
     
     - parameter deviceID: (path)  
     - parameter statsID: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDeviceStats(deviceID: UUID, statsID: UUID, apiResponseQueue: DispatchQueue = ForestVPNAPIAPI.apiResponseQueue, completion: @escaping ((_ data: DeviceStats?, _ error: Error?) -> Void)) {
        getDeviceStatsWithRequestBuilder(deviceID: deviceID, statsID: statsID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Device's stats detail
     - GET /devices/{deviceID}/stats/{statsID}/
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter deviceID: (path)  
     - parameter statsID: (path)  
     - returns: RequestBuilder<DeviceStats> 
     */
    open class func getDeviceStatsWithRequestBuilder(deviceID: UUID, statsID: UUID) -> RequestBuilder<DeviceStats> {
        var localVariablePath = "/devices/{deviceID}/stats/{statsID}/"
        let deviceIDPreEscape = "\(APIHelper.mapValueToPathItem(deviceID))"
        let deviceIDPostEscape = deviceIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{deviceID}", with: deviceIDPostEscape, options: .literal, range: nil)
        let statsIDPreEscape = "\(APIHelper.mapValueToPathItem(statsID))"
        let statsIDPostEscape = statsIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{statsID}", with: statsIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = ForestVPNAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DeviceStats>.Type = ForestVPNAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Device's wireguard profile detail
     
     - parameter deviceID: (path)  
     - parameter wireGuardID: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDeviceWireGuard(deviceID: UUID, wireGuardID: UUID, apiResponseQueue: DispatchQueue = ForestVPNAPIAPI.apiResponseQueue, completion: @escaping ((_ data: WireGuard?, _ error: Error?) -> Void)) {
        getDeviceWireGuardWithRequestBuilder(deviceID: deviceID, wireGuardID: wireGuardID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Device's wireguard profile detail
     - GET /devices/{deviceID}/wireguards/{wireGuardID}/
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter deviceID: (path)  
     - parameter wireGuardID: (path)  
     - returns: RequestBuilder<WireGuard> 
     */
    open class func getDeviceWireGuardWithRequestBuilder(deviceID: UUID, wireGuardID: UUID) -> RequestBuilder<WireGuard> {
        var localVariablePath = "/devices/{deviceID}/wireguards/{wireGuardID}/"
        let deviceIDPreEscape = "\(APIHelper.mapValueToPathItem(deviceID))"
        let deviceIDPostEscape = deviceIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{deviceID}", with: deviceIDPostEscape, options: .literal, range: nil)
        let wireGuardIDPreEscape = "\(APIHelper.mapValueToPathItem(wireGuardID))"
        let wireGuardIDPostEscape = wireGuardIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{wireGuardID}", with: wireGuardIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = ForestVPNAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WireGuard>.Type = ForestVPNAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Device bindings
     
     - parameter deviceID: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listDeviceBindings(deviceID: UUID, apiResponseQueue: DispatchQueue = ForestVPNAPIAPI.apiResponseQueue, completion: @escaping ((_ data: [String]?, _ error: Error?) -> Void)) {
        listDeviceBindingsWithRequestBuilder(deviceID: deviceID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Device bindings
     - GET /devices/{deviceID}/bindings/
     - Each device has bindings to specific servers. This methods returns hostnames where this device binded in a particular time. 
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter deviceID: (path)  
     - returns: RequestBuilder<[String]> 
     */
    open class func listDeviceBindingsWithRequestBuilder(deviceID: UUID) -> RequestBuilder<[String]> {
        var localVariablePath = "/devices/{deviceID}/bindings/"
        let deviceIDPreEscape = "\(APIHelper.mapValueToPathItem(deviceID))"
        let deviceIDPostEscape = deviceIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{deviceID}", with: deviceIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = ForestVPNAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[String]>.Type = ForestVPNAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Device connection modes
     
     - parameter deviceID: (path)  
     - parameter xAndroidPackage: (header)  (optional)
     - parameter xAndroidSHA1: (header)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listDeviceConnectionModes(deviceID: UUID, xAndroidPackage: String? = nil, xAndroidSHA1: String? = nil, apiResponseQueue: DispatchQueue = ForestVPNAPIAPI.apiResponseQueue, completion: @escaping ((_ data: [ConnectionMode]?, _ error: Error?) -> Void)) {
        listDeviceConnectionModesWithRequestBuilder(deviceID: deviceID, xAndroidPackage: xAndroidPackage, xAndroidSHA1: xAndroidSHA1).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Device connection modes
     - GET /devices/{deviceID}/connection-modes/
     - This methods returns list of connection modes are availbale for current device. 
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter deviceID: (path)  
     - parameter xAndroidPackage: (header)  (optional)
     - parameter xAndroidSHA1: (header)  (optional)
     - returns: RequestBuilder<[ConnectionMode]> 
     */
    open class func listDeviceConnectionModesWithRequestBuilder(deviceID: UUID, xAndroidPackage: String? = nil, xAndroidSHA1: String? = nil) -> RequestBuilder<[ConnectionMode]> {
        var localVariablePath = "/devices/{deviceID}/connection-modes/"
        let deviceIDPreEscape = "\(APIHelper.mapValueToPathItem(deviceID))"
        let deviceIDPostEscape = deviceIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{deviceID}", with: deviceIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = ForestVPNAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Android-Package": xAndroidPackage?.encodeToJSON(),
            "X-Android-SHA1": xAndroidSHA1?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[ConnectionMode]>.Type = ForestVPNAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Device's detail stats list
     
     - parameter deviceID: (path)  
     - parameter dateTimeAfter: (query)  (optional)
     - parameter dateTimeBefore: (query)  (optional)
     - parameter perPage: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listDeviceDetailStats(deviceID: UUID, dateTimeAfter: String? = nil, dateTimeBefore: String? = nil, perPage: Double? = nil, page: Double? = nil, apiResponseQueue: DispatchQueue = ForestVPNAPIAPI.apiResponseQueue, completion: @escaping ((_ data: [DeviceStats]?, _ error: Error?) -> Void)) {
        listDeviceDetailStatsWithRequestBuilder(deviceID: deviceID, dateTimeAfter: dateTimeAfter, dateTimeBefore: dateTimeBefore, perPage: perPage, page: page).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Device's detail stats list
     - GET /devices/{deviceID}/detail-stats/
     - BASIC:
       - type: http
       - name: bearerAuth
     - responseHeaders: [Link(String)]
     - parameter deviceID: (path)  
     - parameter dateTimeAfter: (query)  (optional)
     - parameter dateTimeBefore: (query)  (optional)
     - parameter perPage: (query)  (optional)
     - parameter page: (query)  (optional)
     - returns: RequestBuilder<[DeviceStats]> 
     */
    open class func listDeviceDetailStatsWithRequestBuilder(deviceID: UUID, dateTimeAfter: String? = nil, dateTimeBefore: String? = nil, perPage: Double? = nil, page: Double? = nil) -> RequestBuilder<[DeviceStats]> {
        var localVariablePath = "/devices/{deviceID}/detail-stats/"
        let deviceIDPreEscape = "\(APIHelper.mapValueToPathItem(deviceID))"
        let deviceIDPostEscape = deviceIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{deviceID}", with: deviceIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = ForestVPNAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "date_time_after": dateTimeAfter?.encodeToJSON(),
            "date_time_before": dateTimeBefore?.encodeToJSON(),
            "per_page": perPage?.encodeToJSON(),
            "page": page?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[DeviceStats]>.Type = ForestVPNAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Device Port Forwarding List
     
     - parameter deviceID: (path)  
     - parameter perPage: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listDevicePortForwardings(deviceID: UUID, perPage: Double? = nil, page: Double? = nil, apiResponseQueue: DispatchQueue = ForestVPNAPIAPI.apiResponseQueue, completion: @escaping ((_ data: [PortForwarding]?, _ error: Error?) -> Void)) {
        listDevicePortForwardingsWithRequestBuilder(deviceID: deviceID, perPage: perPage, page: page).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Device Port Forwarding List
     - GET /devices/{deviceID}/port-forwarding/
     - Retrieve device's port forwarding lis 
     - BASIC:
       - type: http
       - name: bearerAuth
     - responseHeaders: [Link(String)]
     - parameter deviceID: (path)  
     - parameter perPage: (query)  (optional)
     - parameter page: (query)  (optional)
     - returns: RequestBuilder<[PortForwarding]> 
     */
    open class func listDevicePortForwardingsWithRequestBuilder(deviceID: UUID, perPage: Double? = nil, page: Double? = nil) -> RequestBuilder<[PortForwarding]> {
        var localVariablePath = "/devices/{deviceID}/port-forwarding/"
        let deviceIDPreEscape = "\(APIHelper.mapValueToPathItem(deviceID))"
        let deviceIDPostEscape = deviceIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{deviceID}", with: deviceIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = ForestVPNAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(),
            "page": page?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[PortForwarding]>.Type = ForestVPNAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Device's stats list
     
     - parameter deviceID: (path)  
     - parameter dateAfter: (query)  (optional)
     - parameter dateBefore: (query)  (optional)
     - parameter perPage: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listDeviceStats(deviceID: UUID, dateAfter: Date? = nil, dateBefore: Date? = nil, perPage: Double? = nil, page: Double? = nil, apiResponseQueue: DispatchQueue = ForestVPNAPIAPI.apiResponseQueue, completion: @escaping ((_ data: [DeviceStats]?, _ error: Error?) -> Void)) {
        listDeviceStatsWithRequestBuilder(deviceID: deviceID, dateAfter: dateAfter, dateBefore: dateBefore, perPage: perPage, page: page).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Device's stats list
     - GET /devices/{deviceID}/stats/
     - BASIC:
       - type: http
       - name: bearerAuth
     - responseHeaders: [Link(String)]
     - parameter deviceID: (path)  
     - parameter dateAfter: (query)  (optional)
     - parameter dateBefore: (query)  (optional)
     - parameter perPage: (query)  (optional)
     - parameter page: (query)  (optional)
     - returns: RequestBuilder<[DeviceStats]> 
     */
    open class func listDeviceStatsWithRequestBuilder(deviceID: UUID, dateAfter: Date? = nil, dateBefore: Date? = nil, perPage: Double? = nil, page: Double? = nil) -> RequestBuilder<[DeviceStats]> {
        var localVariablePath = "/devices/{deviceID}/stats/"
        let deviceIDPreEscape = "\(APIHelper.mapValueToPathItem(deviceID))"
        let deviceIDPostEscape = deviceIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{deviceID}", with: deviceIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = ForestVPNAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "date_after": dateAfter?.encodeToJSON(),
            "date_before": dateBefore?.encodeToJSON(),
            "per_page": perPage?.encodeToJSON(),
            "page": page?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[DeviceStats]>.Type = ForestVPNAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Device's wireguard peers
     
     - parameter deviceID: (path)  
     - parameter wireGuardID: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listDeviceWireGuardPeers(deviceID: UUID, wireGuardID: UUID, apiResponseQueue: DispatchQueue = ForestVPNAPIAPI.apiResponseQueue, completion: @escaping ((_ data: [WireGuardPeer]?, _ error: Error?) -> Void)) {
        listDeviceWireGuardPeersWithRequestBuilder(deviceID: deviceID, wireGuardID: wireGuardID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Device's wireguard peers
     - GET /devices/{deviceID}/wireguards/{wireGuardID}/peers/
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter deviceID: (path)  
     - parameter wireGuardID: (path)  
     - returns: RequestBuilder<[WireGuardPeer]> 
     */
    open class func listDeviceWireGuardPeersWithRequestBuilder(deviceID: UUID, wireGuardID: UUID) -> RequestBuilder<[WireGuardPeer]> {
        var localVariablePath = "/devices/{deviceID}/wireguards/{wireGuardID}/peers/"
        let deviceIDPreEscape = "\(APIHelper.mapValueToPathItem(deviceID))"
        let deviceIDPostEscape = deviceIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{deviceID}", with: deviceIDPostEscape, options: .literal, range: nil)
        let wireGuardIDPreEscape = "\(APIHelper.mapValueToPathItem(wireGuardID))"
        let wireGuardIDPostEscape = wireGuardIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{wireGuardID}", with: wireGuardIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = ForestVPNAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[WireGuardPeer]>.Type = ForestVPNAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Device's wireguard profiles list
     
     - parameter deviceID: (path)  
     - parameter perPage: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listDeviceWireGuards(deviceID: UUID, perPage: Double? = nil, page: Double? = nil, apiResponseQueue: DispatchQueue = ForestVPNAPIAPI.apiResponseQueue, completion: @escaping ((_ data: [WireGuard]?, _ error: Error?) -> Void)) {
        listDeviceWireGuardsWithRequestBuilder(deviceID: deviceID, perPage: perPage, page: page).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Device's wireguard profiles list
     - GET /devices/{deviceID}/wireguards/
     - BASIC:
       - type: http
       - name: bearerAuth
     - responseHeaders: [Link(String)]
     - parameter deviceID: (path)  
     - parameter perPage: (query)  (optional)
     - parameter page: (query)  (optional)
     - returns: RequestBuilder<[WireGuard]> 
     */
    open class func listDeviceWireGuardsWithRequestBuilder(deviceID: UUID, perPage: Double? = nil, page: Double? = nil) -> RequestBuilder<[WireGuard]> {
        var localVariablePath = "/devices/{deviceID}/wireguards/"
        let deviceIDPreEscape = "\(APIHelper.mapValueToPathItem(deviceID))"
        let deviceIDPostEscape = deviceIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{deviceID}", with: deviceIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = ForestVPNAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(),
            "page": page?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[WireGuard]>.Type = ForestVPNAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Device List
     
     - parameter externalKey: (query)  (optional)
     - parameter perPage: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listDevices(externalKey: String? = nil, perPage: Double? = nil, page: Double? = nil, apiResponseQueue: DispatchQueue = ForestVPNAPIAPI.apiResponseQueue, completion: @escaping ((_ data: [Device]?, _ error: Error?) -> Void)) {
        listDevicesWithRequestBuilder(externalKey: externalKey, perPage: perPage, page: page).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Device List
     - GET /devices/
     - Retrieve devices list 
     - BASIC:
       - type: http
       - name: bearerAuth
     - responseHeaders: [Link(String)]
     - parameter externalKey: (query)  (optional)
     - parameter perPage: (query)  (optional)
     - parameter page: (query)  (optional)
     - returns: RequestBuilder<[Device]> 
     */
    open class func listDevicesWithRequestBuilder(externalKey: String? = nil, perPage: Double? = nil, page: Double? = nil) -> RequestBuilder<[Device]> {
        let localVariablePath = "/devices/"
        let localVariableURLString = ForestVPNAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "external_key": externalKey?.encodeToJSON(),
            "per_page": perPage?.encodeToJSON(),
            "page": page?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Device]>.Type = ForestVPNAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Update device properties
     
     - parameter deviceID: (path)  
     - parameter createOrUpdateDeviceRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateDevice(deviceID: UUID, createOrUpdateDeviceRequest: CreateOrUpdateDeviceRequest, apiResponseQueue: DispatchQueue = ForestVPNAPIAPI.apiResponseQueue, completion: @escaping ((_ data: Device?, _ error: Error?) -> Void)) {
        updateDeviceWithRequestBuilder(deviceID: deviceID, createOrUpdateDeviceRequest: createOrUpdateDeviceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update device properties
     - PATCH /devices/{deviceID}/
     - Update device properties 
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter deviceID: (path)  
     - parameter createOrUpdateDeviceRequest: (body)  
     - returns: RequestBuilder<Device> 
     */
    open class func updateDeviceWithRequestBuilder(deviceID: UUID, createOrUpdateDeviceRequest: CreateOrUpdateDeviceRequest) -> RequestBuilder<Device> {
        var localVariablePath = "/devices/{deviceID}/"
        let deviceIDPreEscape = "\(APIHelper.mapValueToPathItem(deviceID))"
        let deviceIDPostEscape = deviceIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{deviceID}", with: deviceIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = ForestVPNAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createOrUpdateDeviceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Device>.Type = ForestVPNAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Update device's port forwarding
     
     - parameter deviceID: (path)  
     - parameter portForwardingID: (path)  
     - parameter createOrUpdatePortForwardingRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateDevicePortForwarding(deviceID: UUID, portForwardingID: UUID, createOrUpdatePortForwardingRequest: CreateOrUpdatePortForwardingRequest, apiResponseQueue: DispatchQueue = ForestVPNAPIAPI.apiResponseQueue, completion: @escaping ((_ data: PortForwarding?, _ error: Error?) -> Void)) {
        updateDevicePortForwardingWithRequestBuilder(deviceID: deviceID, portForwardingID: portForwardingID, createOrUpdatePortForwardingRequest: createOrUpdatePortForwardingRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update device's port forwarding
     - PATCH /devices/{deviceID}/port-forwarding/{portForwardingID}/
     - Update device's port forwarding dst_port 
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter deviceID: (path)  
     - parameter portForwardingID: (path)  
     - parameter createOrUpdatePortForwardingRequest: (body)  
     - returns: RequestBuilder<PortForwarding> 
     */
    open class func updateDevicePortForwardingWithRequestBuilder(deviceID: UUID, portForwardingID: UUID, createOrUpdatePortForwardingRequest: CreateOrUpdatePortForwardingRequest) -> RequestBuilder<PortForwarding> {
        var localVariablePath = "/devices/{deviceID}/port-forwarding/{portForwardingID}/"
        let deviceIDPreEscape = "\(APIHelper.mapValueToPathItem(deviceID))"
        let deviceIDPostEscape = deviceIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{deviceID}", with: deviceIDPostEscape, options: .literal, range: nil)
        let portForwardingIDPreEscape = "\(APIHelper.mapValueToPathItem(portForwardingID))"
        let portForwardingIDPostEscape = portForwardingIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{portForwardingID}", with: portForwardingIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = ForestVPNAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createOrUpdatePortForwardingRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PortForwarding>.Type = ForestVPNAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
