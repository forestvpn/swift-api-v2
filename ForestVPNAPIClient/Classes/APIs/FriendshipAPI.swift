//
// FriendshipAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class FriendshipAPI {

    /**
     Accept friendship invitation
     
     - parameter code: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func acceptFriendshipInvitation(code: String, apiResponseQueue: DispatchQueue = ForestVPNAPIAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        acceptFriendshipInvitationWithRequestBuilder(code: code).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Accept friendship invitation
     - PATCH /friendship/invitations/{code}/
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter code: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func acceptFriendshipInvitationWithRequestBuilder(code: String) -> RequestBuilder<Void> {
        var localVariablePath = "/friendship/invitations/{code}/"
        let codePreEscape = "\(APIHelper.mapValueToPathItem(code))"
        let codePostEscape = codePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{code}", with: codePostEscape, options: .literal, range: nil)
        let localVariableURLString = ForestVPNAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ForestVPNAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Create friendship invitation
     
     - parameter perPage: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createFriendshipInvitation(perPage: Double? = nil, page: Double? = nil, apiResponseQueue: DispatchQueue = ForestVPNAPIAPI.apiResponseQueue, completion: @escaping ((_ data: FriendshipInvitation?, _ error: Error?) -> Void)) {
        createFriendshipInvitationWithRequestBuilder(perPage: perPage, page: page).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create friendship invitation
     - POST /friendship/invitations/
     - BASIC:
       - type: http
       - name: bearerAuth
     - responseHeaders: [Link(String)]
     - parameter perPage: (query)  (optional)
     - parameter page: (query)  (optional)
     - returns: RequestBuilder<FriendshipInvitation> 
     */
    open class func createFriendshipInvitationWithRequestBuilder(perPage: Double? = nil, page: Double? = nil) -> RequestBuilder<FriendshipInvitation> {
        let localVariablePath = "/friendship/invitations/"
        let localVariableURLString = ForestVPNAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(),
            "page": page?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FriendshipInvitation>.Type = ForestVPNAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Delete friend
     
     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteFriend(id: UUID, apiResponseQueue: DispatchQueue = ForestVPNAPIAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        deleteFriendWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete friend
     - DELETE /friendship/friends/{id}/
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter id: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deleteFriendWithRequestBuilder(id: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/friendship/friends/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ForestVPNAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ForestVPNAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Friend details
     
     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFriend(id: UUID, apiResponseQueue: DispatchQueue = ForestVPNAPIAPI.apiResponseQueue, completion: @escaping ((_ data: Friendship?, _ error: Error?) -> Void)) {
        getFriendWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Friend details
     - GET /friendship/friends/{id}/
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter id: (path)  
     - returns: RequestBuilder<Friendship> 
     */
    open class func getFriendWithRequestBuilder(id: UUID) -> RequestBuilder<Friendship> {
        var localVariablePath = "/friendship/friends/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ForestVPNAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Friendship>.Type = ForestVPNAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Friendship invitation details
     
     - parameter code: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFriendshipInvitation(code: String, apiResponseQueue: DispatchQueue = ForestVPNAPIAPI.apiResponseQueue, completion: @escaping ((_ data: FriendshipInvitation?, _ error: Error?) -> Void)) {
        getFriendshipInvitationWithRequestBuilder(code: code).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Friendship invitation details
     - GET /friendship/invitations/{code}/
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter code: (path)  
     - returns: RequestBuilder<FriendshipInvitation> 
     */
    open class func getFriendshipInvitationWithRequestBuilder(code: String) -> RequestBuilder<FriendshipInvitation> {
        var localVariablePath = "/friendship/invitations/{code}/"
        let codePreEscape = "\(APIHelper.mapValueToPathItem(code))"
        let codePostEscape = codePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{code}", with: codePostEscape, options: .literal, range: nil)
        let localVariableURLString = ForestVPNAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FriendshipInvitation>.Type = ForestVPNAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get friends list
     
     - parameter perPage: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listFriends(perPage: Double? = nil, page: Double? = nil, apiResponseQueue: DispatchQueue = ForestVPNAPIAPI.apiResponseQueue, completion: @escaping ((_ data: [Friendship]?, _ error: Error?) -> Void)) {
        listFriendsWithRequestBuilder(perPage: perPage, page: page).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get friends list
     - GET /friendship/friends/
     - BASIC:
       - type: http
       - name: bearerAuth
     - responseHeaders: [Link(String)]
     - parameter perPage: (query)  (optional)
     - parameter page: (query)  (optional)
     - returns: RequestBuilder<[Friendship]> 
     */
    open class func listFriendsWithRequestBuilder(perPage: Double? = nil, page: Double? = nil) -> RequestBuilder<[Friendship]> {
        let localVariablePath = "/friendship/friends/"
        let localVariableURLString = ForestVPNAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "per_page": perPage?.encodeToJSON(),
            "page": page?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Friendship]>.Type = ForestVPNAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Reject friendship invitation
     
     - parameter code: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func rejectFriendshipInvitation(code: String, apiResponseQueue: DispatchQueue = ForestVPNAPIAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        rejectFriendshipInvitationWithRequestBuilder(code: code).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Reject friendship invitation
     - DELETE /friendship/invitations/{code}/
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter code: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func rejectFriendshipInvitationWithRequestBuilder(code: String) -> RequestBuilder<Void> {
        var localVariablePath = "/friendship/invitations/{code}/"
        let codePreEscape = "\(APIHelper.mapValueToPathItem(code))"
        let codePostEscape = codePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{code}", with: codePostEscape, options: .literal, range: nil)
        let localVariableURLString = ForestVPNAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ForestVPNAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
