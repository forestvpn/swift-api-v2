//
// AuthAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AuthAPI {

    /**
     Legacy auth migration
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func migrateLegacyAuth(apiResponseQueue: DispatchQueue = ForestVPNAPIAPI.apiResponseQueue, completion: @escaping ((_ data: LegacyAuthMigrationToken?, _ error: Error?) -> Void)) {
        migrateLegacyAuthWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Legacy auth migration
     - GET /legacy/auth/
     - BASIC:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<LegacyAuthMigrationToken> 
     */
    open class func migrateLegacyAuthWithRequestBuilder() -> RequestBuilder<LegacyAuthMigrationToken> {
        let localVariablePath = "/legacy/auth/"
        let localVariableURLString = ForestVPNAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LegacyAuthMigrationToken>.Type = ForestVPNAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Who am I
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func whoAmI(apiResponseQueue: DispatchQueue = ForestVPNAPIAPI.apiResponseQueue, completion: @escaping ((_ data: User?, _ error: Error?) -> Void)) {
        whoAmIWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Who am I
     - GET /auth/whoami/
     - BASIC:
       - type: http
       - name: bearerAuth
     - returns: RequestBuilder<User> 
     */
    open class func whoAmIWithRequestBuilder() -> RequestBuilder<User> {
        let localVariablePath = "/auth/whoami/"
        let localVariableURLString = ForestVPNAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<User>.Type = ForestVPNAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
