//
// FcmAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class FcmAPI {

    /**
     Device registration for push notification through out Firebase Cloud Messaging
     
     - parameter createFCMDeviceRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createFCMDevice(createFCMDeviceRequest: CreateFCMDeviceRequest, apiResponseQueue: DispatchQueue = ForestVPNAPIAPI.apiResponseQueue, completion: @escaping ((_ data: FCMDevice?, _ error: Error?) -> Void)) {
        createFCMDeviceWithRequestBuilder(createFCMDeviceRequest: createFCMDeviceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Device registration for push notification through out Firebase Cloud Messaging
     - POST /notification/fcm/
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter createFCMDeviceRequest: (body)  
     - returns: RequestBuilder<FCMDevice> 
     */
    open class func createFCMDeviceWithRequestBuilder(createFCMDeviceRequest: CreateFCMDeviceRequest) -> RequestBuilder<FCMDevice> {
        let localVariablePath = "/notification/fcm/"
        let localVariableURLString = ForestVPNAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createFCMDeviceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FCMDevice>.Type = ForestVPNAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Delete fcm device
     
     - parameter registrationID: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteFCMDevice(registrationID: String, apiResponseQueue: DispatchQueue = ForestVPNAPIAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        deleteFCMDeviceWithRequestBuilder(registrationID: registrationID).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete fcm device
     - DELETE /notification/fcm/{registrationID}/
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter registrationID: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deleteFCMDeviceWithRequestBuilder(registrationID: String) -> RequestBuilder<Void> {
        var localVariablePath = "/notification/fcm/{registrationID}/"
        let registrationIDPreEscape = "\(APIHelper.mapValueToPathItem(registrationID))"
        let registrationIDPostEscape = registrationIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{registrationID}", with: registrationIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = ForestVPNAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ForestVPNAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Device info
     
     - parameter registrationID: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFCMDevice(registrationID: String, apiResponseQueue: DispatchQueue = ForestVPNAPIAPI.apiResponseQueue, completion: @escaping ((_ data: FCMDevice?, _ error: Error?) -> Void)) {
        getFCMDeviceWithRequestBuilder(registrationID: registrationID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Device info
     - GET /notification/fcm/{registrationID}/
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter registrationID: (path)  
     - returns: RequestBuilder<FCMDevice> 
     */
    open class func getFCMDeviceWithRequestBuilder(registrationID: String) -> RequestBuilder<FCMDevice> {
        var localVariablePath = "/notification/fcm/{registrationID}/"
        let registrationIDPreEscape = "\(APIHelper.mapValueToPathItem(registrationID))"
        let registrationIDPostEscape = registrationIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{registrationID}", with: registrationIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = ForestVPNAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FCMDevice>.Type = ForestVPNAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Update device fcm properties
     
     - parameter registrationID: (path)  
     - parameter updateFCMDeviceRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateFCMDevice(registrationID: String, updateFCMDeviceRequest: UpdateFCMDeviceRequest, apiResponseQueue: DispatchQueue = ForestVPNAPIAPI.apiResponseQueue, completion: @escaping ((_ data: FCMDevice?, _ error: Error?) -> Void)) {
        updateFCMDeviceWithRequestBuilder(registrationID: registrationID, updateFCMDeviceRequest: updateFCMDeviceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update device fcm properties
     - PATCH /notification/fcm/{registrationID}/
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter registrationID: (path)  
     - parameter updateFCMDeviceRequest: (body)  
     - returns: RequestBuilder<FCMDevice> 
     */
    open class func updateFCMDeviceWithRequestBuilder(registrationID: String, updateFCMDeviceRequest: UpdateFCMDeviceRequest) -> RequestBuilder<FCMDevice> {
        var localVariablePath = "/notification/fcm/{registrationID}/"
        let registrationIDPreEscape = "\(APIHelper.mapValueToPathItem(registrationID))"
        let registrationIDPostEscape = registrationIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{registrationID}", with: registrationIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = ForestVPNAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateFCMDeviceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FCMDevice>.Type = ForestVPNAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
