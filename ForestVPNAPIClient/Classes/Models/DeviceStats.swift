//
// DeviceStats.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct DeviceStats: Codable, Hashable {

    public var id: UUID?
    public var connections: Double?
    public var receivedBytes: Double?
    public var transmittedBytes: Double?
    public var blockedAds: Double?
    public var blockedMalwares: Double?
    public var date: Date?

    public init(id: UUID? = nil, connections: Double? = nil, receivedBytes: Double? = nil, transmittedBytes: Double? = nil, blockedAds: Double? = nil, blockedMalwares: Double? = nil, date: Date? = nil) {
        self.id = id
        self.connections = connections
        self.receivedBytes = receivedBytes
        self.transmittedBytes = transmittedBytes
        self.blockedAds = blockedAds
        self.blockedMalwares = blockedMalwares
        self.date = date
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case connections
        case receivedBytes = "received_bytes"
        case transmittedBytes = "transmitted_bytes"
        case blockedAds = "blocked_ads"
        case blockedMalwares = "blocked_malwares"
        case date
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(connections, forKey: .connections)
        try container.encodeIfPresent(receivedBytes, forKey: .receivedBytes)
        try container.encodeIfPresent(transmittedBytes, forKey: .transmittedBytes)
        try container.encodeIfPresent(blockedAds, forKey: .blockedAds)
        try container.encodeIfPresent(blockedMalwares, forKey: .blockedMalwares)
        try container.encodeIfPresent(date, forKey: .date)
    }
}

