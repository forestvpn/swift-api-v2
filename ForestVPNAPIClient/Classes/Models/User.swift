//
// User.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct User: Codable, Hashable {

    public var id: UUID
    public var username: String
    public var firstName: String?
    public var lastName: String?
    public var email: String?
    public var emailVerified: Bool?
    public var photoUrl: String?
    public var dateJoined: Date?
    public var environments: [Environment]?

    public init(id: UUID, username: String, firstName: String? = nil, lastName: String? = nil, email: String? = nil, emailVerified: Bool? = nil, photoUrl: String? = nil, dateJoined: Date? = nil, environments: [Environment]? = nil) {
        self.id = id
        self.username = username
        self.firstName = firstName
        self.lastName = lastName
        self.email = email
        self.emailVerified = emailVerified
        self.photoUrl = photoUrl
        self.dateJoined = dateJoined
        self.environments = environments
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case username
        case firstName = "first_name"
        case lastName = "last_name"
        case email
        case emailVerified = "email_verified"
        case photoUrl = "photo_url"
        case dateJoined = "date_joined"
        case environments
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(username, forKey: .username)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(emailVerified, forKey: .emailVerified)
        try container.encodeIfPresent(photoUrl, forKey: .photoUrl)
        try container.encodeIfPresent(dateJoined, forKey: .dateJoined)
        try container.encodeIfPresent(environments, forKey: .environments)
    }
}

